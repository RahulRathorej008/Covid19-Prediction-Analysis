
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.colors as ncolors
import random
import math
import time
from sklearn.model_selection import RandomizedSearchCV,train_test_split
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error,mean_absolute_error
import datetime
import operator
plt.style.use('seaborn')
%matplotlib inline

confirmed_cases=pd.read_csv('F:\covid19_dataset/time_series_covid_19_confirmed.csv')
deaths_reported=pd.read_csv('F:\covid19_dataset/time_series_covid_19_deaths.csv')
recovered_cases=pd.read_csv('F:\covid19_dataset/time_series_covid_19_recovered.csv')

confirmed_cases.head()

deaths_reported.head()

recovered_cases.head()

cols = confirmed_cases.keys()
cols

confirmed=confirmed_cases.loc[:,cols[4]:cols[-1]]

deaths=deaths_reported.loc[:,cols[4]:cols[-1]]

recoveries=recovered_cases.loc[:,cols[4]:cols[-1]]

confirmed.head()

dates=confirmed.keys()
world_cases=[]
total_deaths=[]
mortality_rate=[]
total_recovered=[]

for i in dates:
    confirmed_sum=confirmed[i].sum()
    death_sum=deaths[i].sum()
    recovered_sum=recoveries[i].sum()
    world_cases.append(confirmed_sum)
    total_deaths.append(death_sum)
    total_recovered.append(recovered_sum)
    mortality_rate.append(death_sum)
    
    

confirmed_sum

death_sum

recovered_sum

world_cases

days_since_1_22_2020=np.array([i for i in range(len(dates))]).reshape(-1,1)
world_cases=np.array(world_cases).reshape(-1,1)
total_deaths=np.array(total_deaths).reshape(-1,1)
total_recovered=np.array(total_recovered).reshape(-1,1)

days_since_1_22_2020

world_cases

total_deaths

total_recovered

future_days=10
future_forecast=np.array([i for i in range(len(dates)+future_days)]).reshape(-1,1)
adjusted_dates=future_forecast[:-10]

future_forecast

start='1/22/2020'
start_date=datetime.datetime.strptime(start,'%m/%d/%Y')
future_forecast_dates=[]
for i in range(len(future_forecast)):
    future_forecast_dates.append((start_date+datetime.timedelta(days=i)).strftime('%m/%d/%Y'))

latest_confirmed=confirmed_cases[dates[-1]]
latest_deaths=deaths_reported[dates[-1]]
latest_recover=recovered_cases[dates[-1]]

latest_confirmed

latest_deaths

latest_recover

unique_countries=list(confirmed_cases['Country/Region'].unique())
unique_countries

country_confirmed_cases=[]
no_cases=[]
for i in unique_countries:
    cases=latest_confirmed[confirmed_cases['Country/Region']==i].sum()
    if cases>0:
        country_confirmed_cases.append(cases)
    else:
        no_cases.append(i)

for i in no_cases:
    unique_countries.remove(i)
    
unique_countries=[k for k,v in sorted(zip(unique_countries,country_confirmed_cases),key=operator.itemgetter(1),reverse=True)]
for i in range(len(unique_countries)):
    country_confirmed_cases[i]=latest_confirmed[confirmed_cases['Country/Region']==unique_countries[i]].sum()
    
  


print('Confirmed Cases by Countries')
for i in range(len(unique_countries)):
    print(f'{unique_countries[i]}: {country_confirmed_cases[i]} cases')

unique_provinces=list(confirmed_cases['Province/State'].unique())


provinces_confirmed_cases=[]
no_cases=[]
for i in unique_provinces:
    cases=latest_confirmed[confirmed_cases['Province/State']==i].sum()
    if cases>0:
        provinces_confirmed_cases.append(cases)
    else:
        no_cases.append(i)

for i in no_cases:
    unique_provinces.remove(i)

for i in range(len(unique_provinces)):
    print(f'{unique_provinces[i]}: {provinces_confirmed_cases[i]} cases')

nan_indices=[]

for i in range(len(unique_provinces)):
    if type(unique_provinces[i])==float:
        nan_indices.append(i)
        
unique_provinces=list(unique_provinces)
provinces_confirmed_cases=list(provinces_confirmed_cases)

for i in nan_indices:
    unique_provinces.pop()
    provinces_confirmed_cases.pop(i)

plt.figure(figsize=(32,32))
plt.barh(unique_countries,country_confirmed_cases)
plt.title('Number of Covid19 Confirm cases in Countries')
plt.xlabel('Number of Covid19 Confirmed Cases')
plt.show()

india_confirmed=latest_confirmed[confirmed_cases['Country/Region']=='India'].sum()
Outside_mainland_india_confirmed=np.sum(country_confirmed_cases)-india_confirmed
plt.figure(figsize=(16,9))
plt.barh('India',india_confirmed)
plt.barh('Outside India',Outside_mainland_india_confirmed)
plt.title('Number of Confirmed Coronavirus Cases')
plt.show()

visual_unique_countries=[]
visual_confirmed_cases=[]
others=np.sum(country_confirmed_cases[10:])
for i in range(len(country_confirmed_cases[:10])):
    visual_unique_countries.append(unique_countries[i])
    visual_confirmed_cases.append(country_confirmed_cases[i])
    
visual_unique_countries.append('Others')
visual_confirmed_cases.append(others)

plt.figure(figsize=(32,18))
plt.barh(visual_unique_countries,visual_confirmed_cases)
plt.title('Number of Covid19 Confirmed Cases in Countries/Region',size=20)
plt.show()

c=random.choices(list(ncolors.CSS4_COLORS.values()),k=len(unique_countries))
plt.figure(figsize=(20,20))
plt.title('Covid19 Confirmed Cases per Country')
plt.pie(visual_confirmed_cases,colors=c)
plt.legend(visual_unique_countries,loc='best')
plt.show()

X_train_confirmed, X_test_confirmed, y_train_confirmed, y_test_confirmed = train_test_split(days_since_1_22_2020, world_cases, test_size=0.15, shuffle=False) 

kernel = ['poly', 'sigmoid', 'rbf']
c = [0.01, 0.1, 1, 10]
gamma = [0.01, 0.1, 1]
epsilon = [0.01, 0.1, 1]
shrinking = [True, False]
svm_grid = {'kernel': kernel, 'C': c, 'gamma' : gamma, 'epsilon': epsilon, 'shrinking' : shrinking}

svm = SVR()
svm_search = RandomizedSearchCV(svm, svm_grid, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=40, verbose=1)
svm_search.fit(X_train_confirmed, y_train_confirmed)

svm_search.best_params_

svm_confirmed = svm_search.best_estimator_
svm_pred = svm_confirmed.predict(future_forecast)

svm_test_pred = svm_confirmed.predict(X_test_confirmed)
plt.plot(svm_test_pred)
plt.plot(y_test_confirmed)
print('MAE:', mean_absolute_error(svm_test_pred, y_test_confirmed))
print('MSE:',mean_squared_error(svm_test_pred, y_test_confirmed))

svm_confirmed

svm_pred


svm_test_pred = svm_confirmed.predict(X_test_confirmed)
plt.plot(svm_test_pred)
plt.plot(y_test_confirmed)
print('MAE:', mean_absolute_error(svm_test_pred, y_test_confirmed))
print('MSE:',mean_squared_error(svm_test_pred, y_test_confirmed))

plt.figure(figsize=(20, 12))
plt.plot(adjusted_dates, world_cases)
plt.title(' Coronavirus Cases Over Time', size=30)
plt.xlabel('Days Since 1/22/2020', size=30)
plt.ylabel(' Cases', size=30)
plt.xticks(size=15)
plt.show()

plt.figure(figsize=(20,12))
plt.plot(adjusted_dates,world_cases)
plt.plot(future_forecast,svm_pred,linestyle='solid',color='purple')
plt.title('Number of Coronavirius cases over time',size=30)
plt.xlabel('Days since 1/22/2020',size=30)
plt.ylabel('Confirmed Cases',size=30)
plt.legend(['Confirmed cases','SVM predictions'])
plt.xticks(size=15)
plt.yticks(size=15)
plt.show()

print('SVM future predictions')
set(zip(future_forecast_dates[-10:],svm_pred[-10:]))

from sklearn.linear_model import LinearRegression
linear_model=LinearRegression(normalize=True,fit_intercept=True)
linear_model.fit(X_train_confirmed,y_train_confirmed)
test_linear_pred=linear_model.predict(X_test_confirmed)
linear_pred=linear_model.predict(future_forecast)
print('MAE:',mean_absolute_error(test_linear_pred,y_test_confirmed))
print('MSE:',mean_squared_error(test_linear_pred, y_test_confirmed))

plt.plot(y_test_confirmed)
plt.plot(test_linear_pred)

plt.figure(figsize=(20, 12))
plt.plot(adjusted_dates, world_cases)
plt.plot(future_forecast, linear_pred, linestyle='dashed', color='orange')
plt.title('Coronavirus Cases Over Time', size=30)
plt.xlabel('Days Since 1/22/2020', size=30)
plt.ylabel('Cases', size=30)
plt.legend(['Confirmed Cases', 'Linear Regression Predictions'])
plt.xticks(size=15)
plt.show()

print('Linear Regression future predictions:')
print(future_forecast_dates[-10:],linear_pred[-10:])

plt.figure(figsize=(20, 12))
plt.plot(adjusted_dates, total_deaths,color='red')
plt.title('Coronavirus Deaths Over Time', size=10)
plt.xlabel('Time in Days', size=30)
plt.ylabel('No of deaths', size=30)
plt.xticks(size=15)
plt.yticks(size=15)
plt.show()

mean_mortality_rate=np.mean(mortality_rate)
plt.figure(figsize=(20, 12))
plt.plot(adjusted_dates,mortality_rate,color='orange')
plt.axhline(y=mean_mortality_rate,linestyle='--', color='black')
plt.title('Mortality Rate of Coronavirus Over Time', size=30)
plt.xlabel('Days Since 1/22/2020', size=30)
plt.ylabel('Cases', size=30)
plt.legend(['Mortality rate','y='+str(mean_mortality_rate)])
plt.yticks(size=15)
plt.xticks(size=15)
plt.show()

plt.figure(figsize=(20, 12))
plt.plot(adjusted_dates, total_recovered,color='red')
plt.title('Coronavirus cases recovered Over Time', size=30)
plt.xlabel('Time in Days', size=30)
plt.ylabel('No of cases', size=30)
plt.xticks(size=15)
plt.yticks(size=15)
plt.show()

plt.figure(figsize=(20, 12))
plt.plot(total_recovered, total_deaths)
plt.title('Coronavirus Deaths vs coronavirus recoveries', size=30)
plt.xlabel('Total Recoveries', size=30)
plt.ylabel('Total deaths', size=30)
plt.xticks(size=15)
plt.yticks(size=15)
plt.show()
